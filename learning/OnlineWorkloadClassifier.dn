uses offline.learning_types.Policy

const char DEFAULT_SERVER_IP[] = "127.0.0.1"
const int DEFAULT_SERVER_PORT = 8008
const char OFFLINE_DEFAULT_SERVER_IP[] = "127.0.0.1"
const int OFFLINE_DEFAULT_SERVER_PORT = 8090
const char ONLINE_DEFAULT_SERVER_IP[] = "127.0.0.1"
const int ONLINE_DEFAULT_SERVER_PORT = 8080

const int OBSERVATION_WINDOW = 1000 //ms
const dec MAX_RT = 1.0 //ms

component provides App requires offline.ResponseTimeSynchronisation rts, time.DateUtil dateUtil, data.StringUtil su, data.adt.HashTable, io.Output out, pal.control.RestAPI, net.http.HTTPRequest request, time.Timer timer, data.IntUtil iu, data.DecUtil du, data.json.JSONParser parser, clustering.ChangePointClustering cpc, offline.OfflineConfigLearner ol, data.adt.List{

    //set params for clustering algorithm
    const int featuresCount = 3
    int k = 1

    List policy
    Policy bootstrap = new Policy(0, 0, 0)
    int env = 0 //currently operating in this env

    Policy getPolicyForEnv(List policyList, int enviro) {
        for(int i = 0; i < policyList.getLength(); i++) {
            Policy cur = policyList.getIndex(i)
            if (cur.env == enviro) {
                return cur
            }
        }
        return null
    }

    /*
    int currentEnv(Clustering cluster, dec features[], int enviro) {
        if (policy.arrayLength == 1 && enviro == 0) {
            return 0
        }
        cluster.addValue(features, null) 
        Cluster clusters[] = cluster.cluster(k)
        int concekCount = 0
        out.println("Searching For: ")
        out.print(du.makeString(features[0]))
        out.print(", ")
        out.print(du.makeString(features[1]))
        out.print(", ")
        out.print(du.makeString(features[2]))
        out.print("\n")
        for (int i = 0; i < clusters.arrayLength; i++) {
            for (int j = 0; j < clusters[i].arrayLength; j++) {
                out.println("Found: ")
                out.print(du.makeString(clusters[i].members[j].values[0]))
                out.print(", ")
                out.print(du.makeString(clusters[i].members[j].values[1]))
                out.print(", ")
                out.print(du.makeString(clusters[i].members[j].values[2]))
                out.print("\n")
                if (
                   features[0] == clusters[i].members[j].values[0]
                   && features[1] == clusters[i].members[j].values[1]
                   && features[2] == clusters[i].members[j].values[2]
                   ) {
                    return i
                }
                else {
                    //
                }
            }
        }
        return 999
    }
    */

    DateTime dateFromStr(char str[]) {
        //ignore first 11 chars (year)
        char time[] = new char[10] //change to 11 if need null term
        for (int i = 11; i < str.arrayLength; i++) {
            time[i-11] = str[i]
        }
        String tokens[] = su.explode(time, ":")
        DateTime start = new DateTime()
        int hour = iu.intFromString(tokens[0].string)
        start.hour = hour
        int min = iu.intFromString(tokens[1].string)
        start.minute = min
        int sec = iu.intFromString(tokens[2].string)
        start.second = sec
        return start
    }

    bool setContains(List set, Data el) {
        Policy elp = el
        for (int i = 0; i < set.getLength(); i++) {
            Policy fromSet = set.getIndex(i)
            if (
                fromSet.action == elp.action &&
                fromSet.maxRT == elp.maxRT
               ) {
                return true
            }
        }
        return false
    }

    List trim(List policyList) {
        List set = new List()
        for (int i = 0; i < policyList.getLength(); i++) {
            if (!setContains(set, policyList.getIndex(i))) {
                set.add(policyList.getIndex(i))
            }
        }
        return set
    }

    int App:main(AppParam params[]) {
        int rtMultiplier = rts.getResponseTimeMultiplier(OFFLINE_DEFAULT_SERVER_IP, ONLINE_DEFAULT_SERVER_IP, OFFLINE_DEFAULT_SERVER_PORT, ONLINE_DEFAULT_SERVER_PORT)
        out.println("rtMultiplier: $(iu.makeString(rtMultiplier))")

        ol.initilise()
        policy = new List()
        policy.add(bootstrap)
		//connect to rest API of PAL and set config to index 0 (or any other index you like...)
		RestAPI restAPI = new RestAPI(DEFAULT_SERVER_IP, DEFAULT_SERVER_PORT)

		String configs[] = restAPI.getConfigs()

        //Clustering cluster = new Clustering(featuresCount)
        cpc.init()

        int firstObservation = 1

        while (true) {
            Policy currentPolicy = getPolicyForEnv(policy, env)
			restAPI.setConfig(configs[currentPolicy.action].string)

            out.print("current action: ")
            out.print(iu.makeString(currentPolicy.action))
            out.print("\n")
            out.print("current env: ")
            out.print(iu.makeString(env))
            out.print("\n")
            out.print("env count: ")
            out.print(iu.makeString(policy.getLength()))
            out.print("\n")
            out.println("---------Policy---------")
            out.println("|--Env-----|---Action---|---Constraint---|")
            for (int i = 0; i < policy.getLength(); i++) {
                Policy x = policy.getIndex(i)
                out.print(iu.makeString(x.env))
                out.print("  |  ")
                out.print(iu.makeString(x.action))
                out.print("  |  ")
                out.print(du.makeString(x.maxRT))
                out.print("\n")
            }
            out.println("---------------------")

            timer.sleep(OBSERVATION_WINDOW)

            //consult pal for server state
			HTTPResponse r = request.get("http://$DEFAULT_SERVER_IP:$DEFAULT_SERVER_PORT/meta/get_perception", null)
			
			//extract the env metrics
			JSONElement doc = parser.parseDocument(r.content)
			JSONElement se = null
			
			//NOTE: if your observation window is "too small" you may get zero reward - e.g. for a web server, if no requests were served in that time
		    
            dec rt = 0.0
            //[0] = resquest count, [1] = textVol, [2] = imageVol
            dec features[] = new dec[3]
			if ((se = parser.getValue(doc, "metrics")) != null) {
                dec vk = iu.intFromString(parser.getValue(se.children[0], "value").value)
                dec vt = iu.intFromString(parser.getValue(se.children[0], "count").value)
                char st[] = parser.getValue(se.children[0], "startTime").value
                char et[] = parser.getValue(se.children[0], "endTime").value
                DateTime start = dateFromStr(st)
                DateTime end = dateFromStr(et)
                DateTime diff = dateUtil.diff(start, end)

                int rt_int = dateUtil.toMilliseconds(diff)
                rt = rt_int / vt

                features[0] = vt
			}
			
			// "environment" data is acquired as below from the JSON data, if you want it...
			if ((se = parser.getValue(doc, "events")) != null) {
				for (int i = 0; i < se.children.arrayLength; i ++) {
                    char name[] = parser.getValue(se.children[i], "name").value
                    dec vk = iu.intFromString(parser.getValue(se.children[i], "value").value)
                    dec vt = iu.intFromString(parser.getValue(se.children[i], "count").value)
                    if (name == "text") {
                        features[1] = vk
                    }
                    else if (name == "image") {
                        features[2] = vk
                    }
				}
			}
            //cluster.addValue(features, null)
            out.print("rt: ")
            out.print(du.makeString(rt))
            out.print("\n")
            
            if (rt >= currentPolicy.maxRT) {
                //if in incorrect env, switch envs and continue
                //int newEnv = currentEnv(cluster, features, env)
                int newEnv = env //temp!
                if(env != newEnv) { //could end up chasing your own tail here
                    out.print("switching from Env: ")
                    out.print(iu.makeString(env))
                    out.print("\n")
                    out.print("To Env: ")
                    out.print(iu.makeString(newEnv))
                    env = newEnv 
                }
                //else create new env and query offline learner
                else {
                    if (firstObservation != 1) {
                        //k+=1
                        cpc.addChangePoint()
                    }
                    cpc.addDataPoint(features)
                    //Cluster clusters[] = cluster.cluster(k)
                    Cluster clusters[] = cpc.cluster(new List())
                    Policy policyForNewEnv = ol.getPolicy(clusters[clusters.arrayLength-1], env, OBSERVATION_WINDOW)
                    Policy local = new Policy((clusters.arrayLength-1), policyForNewEnv.action, policyForNewEnv.maxRT*rtMultiplier)
                    if (firstObservation != 1) {
                        policy.add(local)
                    }
                    else {
                        policy.update(bootstrap, local)
                    }
                    firstObservation = 0
                }
            }
            policy = trim(policy)
        }
        return 0
    }
}
